
public class Network {

	int hLayers;
	int numInputs;
	int numOutputs;
	
	Node[] inputs;
	Node[] outputs;
	
	Node[][]nodes;
	
	double dataInputs[];
	double dataOutputs[];
	double dataLayers[][];
	
	double learningRate;
	
	double pError;
	double error;
	
	public Network(int hLayers, int numInputs, int numOutputs, int numNodes, double learningRate) {
		
		this.hLayers = hLayers;
		this.numInputs = numInputs;
		this.numOutputs = numOutputs;
		
		inputs = new Node[numInputs];
		dataInputs = new double[numInputs];
		
		outputs = new Node[numOutputs];
		dataOutputs = new double[numOutputs];
		
		for(int i = 0; i < numInputs; i++) {
			inputs[i] = new Node(1);
		}
		
		for(int i = 0; i < numOutputs; i++) {
			outputs[i] = new Node(numNodes);
		}
		
		nodes = new Node[hLayers][numNodes];
		dataLayers = new double[hLayers][numNodes]; 
		
		for(int i = 0; i < numNodes; i++) {
			nodes[0][i] = new Node(numInputs);
		}
		
		
		for(int i = 1; i < hLayers; i++){
			for(int j = 0; j < numNodes; j++) {
				nodes[i][j] = new Node(numNodes);
			}
		}
		
		pError = 0.0;
		
	}
	
	public double[] evaluate(double[] input) {
		
		for(int i = 0; i < inputs.length; i++) {
			inputs[i].evaluate(input[i], 0);
			dataInputs[i] = inputs[i].output();
		}
		
		for(int i = 0; i < nodes[0].length; i++) {
			for(int j = 0; j < dataInputs.length; j++) {
				nodes[0][i].evaluate(dataInputs[j], j);
			}
				dataLayers[0][i] = nodes[0][i].output();
		}
		
		//Iterate through layers after first layer
		for(int i = 1; i < nodes.length; i++) {
			
			//Iterate through nodes of current layer
			for(int j = 0; j < nodes[i].length; j++) {
				
				//Iterate through the past inputs to current node
				for(int k = 0; k < dataLayers[i-1].length; k++) {
					nodes[i][j].evaluate(dataLayers[i-1][k], k);
				}
				dataLayers[i][j] = nodes[i][j].output();
			}
		}
		
		//Iterate through output layer nodes
		for(int i = 0; i < outputs.length; i++) {
			
			//Iterate through last outputs from dataLayers
			for(int j = 0; j < dataLayers[dataLayers.length-1].length; j++) {
				outputs[i].evaluate(dataLayers[dataLayers.length-1][j], j);
			}
			
			dataOutputs[i] = outputs[i].output();
		}
		
		dataOutputs = round(dataOutputs);
		
		for(int i = 0; i < dataOutputs.length; i ++) {
			System.out.println(i + ": " + dataOutputs[i]);
		}
				
		return dataOutputs;
		
	}
	
	public double[] round(double[] values) {
		
		for(int i = 0; i < values.length; i++){
			if(values[i] < 0.5) {
				values[i] = 0.0;
			}
			else {
				values[i] = 1.0;
			}
		}
		
		return values;
		
	}
	
	public double calculateError(double[] expected) {
		error = 0.0;
		double numWrong = 0.0;
		
		for(int i = 0; i < dataOutputs.length; i++) {
			numWrong += Math.abs(dataOutputs[i] - expected[i]);
		}
		
		error = numWrong/dataOutputs.length;
		
		return error;
	}

	public double calculateAccuracy(double error) {
		return 1.0 - error;
	}

	public void adjust() {
		
		for(int i = 0; i < outputs.length; i++) {
			outputs[i].adjust(error, learningRate);
		}
	}

	public void print() {
		
	}
	
	public void printInputNodes() {
		System.out.println("----------Inputs----------");
		System.out.println();
		for(int i = 0; i < inputs.length; i++) {
			System.out.println("Node #" + i + 1);
			inputs[i].printNode();
			System.out.println();
		}
	}
}
